{
  "address": "0x6C48275941942582147b645FA6c725664d473bad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd36c3fd1025ad71a38d88824845cea4f51faf9de47526d4d1ff77ca9fcfbd385",
  "receipt": {
    "to": null,
    "from": "0x05dC07b75da36f13143BB1702Edd088488E72783",
    "contractAddress": "0x6C48275941942582147b645FA6c725664d473bad",
    "transactionIndex": 82,
    "gasUsed": "1117361",
    "logsBloom": "0x
    "blockHash": "0xdd851e7d66cb190588a1e20f3724da302cc1ce60134c9484b585f8c30120afc2",
    "transactionHash": "0xd36c3fd1025ad71a38d88824845cea4f51faf9de47526d4d1ff77ca9fcfbd385",
    "logs": [],
    "blockNumber": 7528439,
    "cumulativeGasUsed": "10519900",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "5376b023f8f044c78b89fffc7b315264",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stephen\",\"details\":\"This implements price feeds as our library\\\"s_\\\" prefix represents storage variables\\\"i_\\\" prefix represents immutables\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is to demo a simple fundme contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *  @author Stephen\\n *  @notice This contract is to demo a simple fundme contract\\n *  @dev This implements price feeds as our library\\n *  @dev \\\"s_\\\" prefix represents storage variables\\n *  @dev \\\"i_\\\" prefix represents immutables\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n    AggregatorV3Interface public s_priceFeed;\\n\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value, s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\n        return s_priceFeed.version();\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // using memory variables instead of storage to avoid excessive gas usage\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // getter functions to easily interact with storage variables\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x846ec56089a6c8624eb8eff6c1362727b69d4b5b4fb0a1c0a297426a69d30e62\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x2830ad6e6fbe8ea0c863823475bfabc26dc405acf894197b5c66d7ee95d84b2b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200145a3803806200145a83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b6080516112da620001806000396000818161031c0152818161056b015281816106f501526108eb01526112da6000f3fe6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461015e5780639e87a5cd14610189578063b60d4288146101b4578063be2693f0146101be578063d7b4750c146101c857610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610133575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610be5565b610205565b6040516100ca9190610c2b565b60405180910390f35b3480156100df57600080fd5b506100e861024d565b6040516100f59190610c2b565b60405180910390f35b34801561010a57600080fd5b506101136102f4565b6040516101209190610ca5565b60405180910390f35b61013161031a565b005b34801561013f57600080fd5b5061014861055a565b6040516101559190610c2b565b60405180910390f35b34801561016a57600080fd5b50610173610567565b6040516101809190610ccf565b60405180910390f35b34801561019557600080fd5b5061019e61058f565b6040516101ab9190610ca5565b60405180910390f35b6101bc6105b9565b005b6101c66106f3565b005b3480156101d457600080fd5b506101ef60048036038101906101ea9190610d16565b6109b7565b6040516101fc9190610ccf565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b757600080fd5b505afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610d58565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561044a576000600182815481106103c5576103c4610d85565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610de3565b9150506103a2565b50600067ffffffffffffffff81111561046657610465610e2c565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600190805190602001906104aa929190610adb565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610e8c565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610efe565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105f8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ff90919063ffffffff16565b1015610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090610f6a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106879190610f8a565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b2575b5050505050905060005b815181101561088657600082828151811061082457610823610d85565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087e90610de3565b915050610806565b50600067ffffffffffffffff8111156108a2576108a1610e2c565b5b6040519080825280602002602001820160405280156108d05781602001602082028036833780820191505090505b50600190805190602001906108e6929190610adb565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092d90610e8c565b60006040518083038185875af1925050503d806000811461096a576040519150601f19603f3d011682016040523d82523d6000602084013e61096f565b606091505b50509050806109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90610efe565b60405180910390fd5b5050565b6000600182815481106109cd576109cc610d85565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a0b83610a3b565b90506000670de0b6b3a76400008583610a249190610fe0565b610a2e9190611069565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611112565b5050509150506402540be40081610ad3919061118d565b915050919050565b828054828255906000526020600020908101928215610b54579160200282015b82811115610b535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610afb565b5b509050610b619190610b65565b5090565b5b80821115610b7e576000816000905550600101610b66565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb282610b87565b9050919050565b610bc281610ba7565b8114610bcd57600080fd5b50565b600081359050610bdf81610bb9565b92915050565b600060208284031215610bfb57610bfa610b82565b5b6000610c0984828501610bd0565b91505092915050565b6000819050919050565b610c2581610c12565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b6000819050919050565b6000610c6b610c66610c6184610b87565b610c46565b610b87565b9050919050565b6000610c7d82610c50565b9050919050565b6000610c8f82610c72565b9050919050565b610c9f81610c84565b82525050565b6000602082019050610cba6000830184610c96565b92915050565b610cc981610ba7565b82525050565b6000602082019050610ce46000830184610cc0565b92915050565b610cf381610c12565b8114610cfe57600080fd5b50565b600081359050610d1081610cea565b92915050565b600060208284031215610d2c57610d2b610b82565b5b6000610d3a84828501610d01565b91505092915050565b600081519050610d5281610cea565b92915050565b600060208284031215610d6e57610d6d610b82565b5b6000610d7c84828501610d43565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dee82610c12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2157610e20610db4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e76600083610e5b565b9150610e8182610e66565b600082019050919050565b6000610e9782610e69565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ee8600b83610ea1565b9150610ef382610eb2565b602082019050919050565b60006020820190508181036000830152610f1781610edb565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f54601b83610ea1565b9150610f5f82610f1e565b602082019050919050565b60006020820190508181036000830152610f8381610f47565b9050919050565b6000610f9582610c12565b9150610fa083610c12565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd557610fd4610db4565b5b828201905092915050565b6000610feb82610c12565b9150610ff683610c12565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561102f5761102e610db4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107482610c12565b915061107f83610c12565b92508261108f5761108e61103a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110b98161109a565b81146110c457600080fd5b50565b6000815190506110d6816110b0565b92915050565b6000819050919050565b6110ef816110dc565b81146110fa57600080fd5b50565b60008151905061110c816110e6565b92915050565b600080600080600060a0868803121561112e5761112d610b82565b5b600061113c888289016110c7565b955050602061114d888289016110fd565b945050604061115e88828901610d43565b935050606061116f88828901610d43565b9250506080611180888289016110c7565b9150509295509295909350565b6000611198826110dc565b91506111a3836110dc565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111e2576111e1610db4565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561121f5761121e610db4565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561125c5761125b610db4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561129957611298610db4565b5b82820290509291505056fea264697066735822122035a3d2bca0d98c020b76269246581a50bd04c9ba98d7749bf93ea8dab048f17464736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063893d20e811610059578063893d20e81461015e5780639e87a5cd14610189578063b60d4288146101b4578063be2693f0146101be578063d7b4750c146101c857610091565b80630343fb25146100965780630d8e6e2c146100d35780630ec3b027146100fe5780633ccfd60b146101295780636b69a59214610133575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610be5565b610205565b6040516100ca9190610c2b565b60405180910390f35b3480156100df57600080fd5b506100e861024d565b6040516100f59190610c2b565b60405180910390f35b34801561010a57600080fd5b506101136102f4565b6040516101209190610ca5565b60405180910390f35b61013161031a565b005b34801561013f57600080fd5b5061014861055a565b6040516101559190610c2b565b60405180910390f35b34801561016a57600080fd5b50610173610567565b6040516101809190610ccf565b60405180910390f35b34801561019557600080fd5b5061019e61058f565b6040516101ab9190610ca5565b60405180910390f35b6101bc6105b9565b005b6101c66106f3565b005b3480156101d457600080fd5b506101ef60048036038101906101ea9190610d16565b6109b7565b6040516101fc9190610ccf565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156102b757600080fd5b505afa1580156102cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ef9190610d58565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461039f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561044a576000600182815481106103c5576103c4610d85565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061044290610de3565b9150506103a2565b50600067ffffffffffffffff81111561046657610465610e2c565b5b6040519080825280602002602001820160405280156104945781602001602082028036833780820191505090505b50600190805190602001906104aa929190610adb565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104d190610e8c565b60006040518083038185875af1925050503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b5050905080610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610efe565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105f8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109ff90919063ffffffff16565b1015610639576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063090610f6a565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106879190610f8a565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610778576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107b2575b5050505050905060005b815181101561088657600082828151811061082457610823610d85565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061087e90610de3565b915050610806565b50600067ffffffffffffffff8111156108a2576108a1610e2c565b5b6040519080825280602002602001820160405280156108d05781602001602082028036833780820191505090505b50600190805190602001906108e6929190610adb565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161092d90610e8c565b60006040518083038185875af1925050503d806000811461096a576040519150601f19603f3d011682016040523d82523d6000602084013e61096f565b606091505b50509050806109b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109aa90610efe565b60405180910390fd5b5050565b6000600182815481106109cd576109cc610d85565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610a0b83610a3b565b90506000670de0b6b3a76400008583610a249190610fe0565b610a2e9190611069565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a8457600080fd5b505afa158015610a98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abc9190611112565b5050509150506402540be40081610ad3919061118d565b915050919050565b828054828255906000526020600020908101928215610b54579160200282015b82811115610b535782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610afb565b5b509050610b619190610b65565b5090565b5b80821115610b7e576000816000905550600101610b66565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bb282610b87565b9050919050565b610bc281610ba7565b8114610bcd57600080fd5b50565b600081359050610bdf81610bb9565b92915050565b600060208284031215610bfb57610bfa610b82565b5b6000610c0984828501610bd0565b91505092915050565b6000819050919050565b610c2581610c12565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b6000819050919050565b6000610c6b610c66610c6184610b87565b610c46565b610b87565b9050919050565b6000610c7d82610c50565b9050919050565b6000610c8f82610c72565b9050919050565b610c9f81610c84565b82525050565b6000602082019050610cba6000830184610c96565b92915050565b610cc981610ba7565b82525050565b6000602082019050610ce46000830184610cc0565b92915050565b610cf381610c12565b8114610cfe57600080fd5b50565b600081359050610d1081610cea565b92915050565b600060208284031215610d2c57610d2b610b82565b5b6000610d3a84828501610d01565b91505092915050565b600081519050610d5281610cea565b92915050565b600060208284031215610d6e57610d6d610b82565b5b6000610d7c84828501610d43565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dee82610c12565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e2157610e20610db4565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e76600083610e5b565b9150610e8182610e66565b600082019050919050565b6000610e9782610e69565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610ee8600b83610ea1565b9150610ef382610eb2565b602082019050919050565b60006020820190508181036000830152610f1781610edb565b9050919050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610f54601b83610ea1565b9150610f5f82610f1e565b602082019050919050565b60006020820190508181036000830152610f8381610f47565b9050919050565b6000610f9582610c12565b9150610fa083610c12565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd557610fd4610db4565b5b828201905092915050565b6000610feb82610c12565b9150610ff683610c12565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561102f5761102e610db4565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107482610c12565b915061107f83610c12565b92508261108f5761108e61103a565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110b98161109a565b81146110c457600080fd5b50565b6000815190506110d6816110b0565b92915050565b6000819050919050565b6110ef816110dc565b81146110fa57600080fd5b50565b60008151905061110c816110e6565b92915050565b600080600080600060a0868803121561112e5761112d610b82565b5b600061113c888289016110c7565b955050602061114d888289016110fd565b945050604061115e88828901610d43565b935050606061116f88828901610d43565b9250506080611180888289016110c7565b9150509295509295909350565b6000611198826110dc565b91506111a3836110dc565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111e2576111e1610db4565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561121f5761121e610db4565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561125c5761125b610db4565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561129957611298610db4565b5b82820290509291505056fea264697066735822122035a3d2bca0d98c020b76269246581a50bd04c9ba98d7749bf93ea8dab048f17464736f6c63430008090033",
  "devdoc": {
    "author": "Stephen",
    "details": "This implements price feeds as our library\"s_\" prefix represents storage variables\"i_\" prefix represents immutables",
    "kind": "dev",
    "methods": {},
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is to demo a simple fundme contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}